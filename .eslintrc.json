{
    "root": true,
    "extends": ["airbnb-base", "plugin:@tanstack/eslint-plugin-query/recommended", "plugin:prettier/recommended"],
    "plugins": ["import", "jsx-a11y", "react", "react-hooks", "@tanstack/query", "jest", "testing-library", "prettier"],
    "ignorePatterns": [
        "vite.config.js",
        "vite.config.mjs",
        "vite.config.ssr.js"
    ],
    "env": {
        "browser": true,
        "commonjs": true,
        "es6": true,
        "jest": true,
        "jest/globals": true
    },
    "parser": "@babel/eslint-parser",
    "parserOptions": {

        // from react-a11y airbnb configuration
        "ecmaFeatures": {
            "jsx": true
        },

        "requireConfigFile": false,
        "babelOptions": {
            "presets": ["@babel/preset-react"]
        }
    },
    "settings": {
        "react": {
            "version": "18.2.0"
        },
        "import/extensions": [".js", ".jsx", ".ts", ".tsx", ".mjs"],
        "import/resolver": {
            "node": {
                "extensions": [".js", ".jsx", ".json"]
            }
        }
    },
    "rules": {
        // https://stackoverflow.com/questions/70203668/why-use-eslint-plugin-prettier-over-eslint-config-prettier
        // https://prettier.io/docs/en/integrating-with-linters.html#notes
        "prettier/prettier": [
            "error",
            {
                "endOfLine": "auto"
            }
        ],

        // from eslint-config-react-app (minus those already in airbnb-base)
        // Inspired by https://github.com/airbnb/javascript but less opinionated.
        // We use eslint-loader so even warnings are very visible.
        // This is why we prefer to use "WARNING" level for potential errors,
        // and we try not to use "ERROR" level at all.

        // In the future, we might create a separate list of rules for production.
        // It would probably be more strict.

        // The ESLint browser environment defines all browser globals as valid,
        // even though most people don't know some of them exist (e.g. `name` or `status`).
        // This is dangerous as it hides accidentally undefined variables.
        // We blacklist the globals that we deem potentially confusing.
        // To use them, explicitly reference them, e.g. `window.name` or `window.status`.
        // https://github.com/facebook/create-react-app/blob/main/packages/eslint-config-react-app/index.js
        "getter-return": "warn",
        "new-parens": "warn",
        "no-array-constructor": "warn",
        "no-cond-assign": ["warn", "except-parens"],
        "no-const-assign": "warn",
        "no-control-regex": "warn",
        "no-delete-var": "warn",
        "no-dupe-args": "warn",
        "no-dupe-class-members": "warn",
        "no-dupe-keys": "warn",
        "no-duplicate-case": "warn",
        "no-empty-character-class": "warn",
        "no-ex-assign": "warn",
        "no-func-assign": "warn",
        "no-invalid-regexp": "warn",
        "no-label-var": "warn",
        "no-mixed-operators": [
            "warn",
            {
                "groups": [
                    ["&", "|", "^", "~", "<<", ">>", ">>>"],
                    ["==", "!=", "===", "!==", ">", ">=", "<", "<="],
                    ["&&", "||"],
                    ["in", "instanceof"]
                ],
                "allowSamePrecedence": false
            }
        ],
        "no-new-object": "warn",
        "no-new-symbol": "warn",
        "no-obj-calls": "warn",
        "no-octal": "warn",
        "no-octal-escape": "warn",
        "no-regex-spaces": "warn",

        // The ESLint browser environment defines all browser globals as valid,
        // even though most people don't know some of them exist (e.g. `name` or `status`).
        // This is dangerous as it hides accidentally undefined variables.
        // We blacklist the globals that we deem potentially confusing.
        // To use them, explicitly reference them, e.g. `window.name` or `window.status`.,
        // requires restrictedGlobals filled by confusing-browser-globals lib :
        // <code>const restrictedGlobals = require('confusing-browser-globals');</code>
        //        "no-restricted-globals": ["error"].concat(restrictedGlobals),

        // https://eslint.org/docs/latest/rules/no-restricted-syntax
        "no-restricted-syntax": [
            "error",
            {
                "selector": "ForInStatement"
            },
            {
                "selector": "LabeledStatement"
            },
            {
                "selector": "WithStatement"
            }
        ],

        "no-shadow-restricted-names": "warn",
        "no-sparse-arrays": "warn",
        "no-template-curly-in-string": "warn",
        "no-this-before-super": "warn",
        "no-undef": "error",
        "no-unreachable": "warn",
        "no-unsafe-negation": "warn",
        "no-use-before-define": [
            "error",
            {
                "variables": false
            }
        ],
        "no-useless-computed-key": "warn",
        "no-useless-constructor": "warn",
        "no-useless-rename": [
            "warn",
            {
                "ignoreDestructuring": false,
                "ignoreImport": false,
                "ignoreExport": false
            }
        ],
        "no-whitespace-before-property": "warn",
        "require-yield": "warn",
        "rest-spread-spacing": ["warn", "never"],
        "strict": ["warn", "never"],
        "unicode-bom": ["warn", "never"],
        "use-isnan": "warn",
        "valid-typeof": "warn",

        // end of eslint-config-react-app copy.

        // Ensure consistent use of file extension within the import path
        // https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/extensions.md
        "import/extensions": [
            "error",
            "never",
            {
                "ignorePackages": true,
                "pattern": {
                    "json": "always",
                    "jpg": "always"
                }
            }
        ],

        // https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/no-unresolved.md
        "import/no-unresolved": ["off"],

        // off allows star exports in lib/index.jsx
        "import/named": ["off"],
        // off allows default export from enums, for example
        "import/no-anonymous-default-export": ["off"],
        // https://github.com/import-js/eslint-plugin-import/tree/main/docs/rules
        "import/first": "error",
        "import/no-amd": "error",
        "import/no-webpack-loader-syntax": "error",

        "jsx-a11y/href-no-hash": [
            "off"
        ],
        // ensure emoji are accessible
        // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/accessible-emoji.md
        // disabled; rule is deprecated
        "jsx-a11y/accessible-emoji": "off",
        // Enforce that all elements that require alternative text have meaningful information
        // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/alt-text.md
        "jsx-a11y/alt-text": [
            "error",
            {
                "elements": [
                    "img",
                    "object",
                    "area",
                    "input[type=\"image\"]"
                ],
                "img": [],
                "object": [],
                "area": [],
                "input[type=\"image\"]": []
            }
        ],
        // Enforce that anchors have content
        // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/anchor-has-content.md
        "jsx-a11y/anchor-has-content": [
            "error",
            {
                "components": []
            }
        ],
        // ensure <a> tags are valid
        // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/anchor-is-valid.md
        "jsx-a11y/anchor-is-valid": [
            "error",
            {
                "components": [
                    "Link"
                ],
                "specialLink": [
                    "to"
                ],
                "aspects": [
                    "noHref",
                    "invalidHref",
                    "preferButton"
                ]
            }
        ],
        // elements with aria-activedescendant must be tabbable
        // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/aria-activedescendant-has-tabindex.md
        "jsx-a11y/aria-activedescendant-has-tabindex": "error",
        // Enforce all aria-* props are valid.
        // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/aria-props.md
        "jsx-a11y/aria-props": "error",
        // Enforce ARIA state and property values are valid.
        // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/aria-proptypes.md
        "jsx-a11y/aria-proptypes": "error",
        // Require ARIA roles to be valid and non-abstract
        // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/aria-role.md
        "jsx-a11y/aria-role": [
            "error",
            {
                "ignoreNonDOM": false
            }
        ],
        // Enforce that elements that do not support ARIA roles, states, and
        // properties do not have those attributes.
        // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/aria-unsupported-elements.md
        "jsx-a11y/aria-unsupported-elements": "error",
        // Ensure the autocomplete attribute is correct and suitable for the form field it is used with
        // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/autocomplete-valid.md
        "jsx-a11y/autocomplete-valid": [
            "off",
            {
                "inputComponents": []
            }
        ],
        // require onClick be accompanied by onKeyUp/onKeyDown/onKeyPress
        // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/click-events-have-key-events.md
        "jsx-a11y/click-events-have-key-events": "error",
        // Enforce that a control (an interactive element) has a text label.
        // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/control-has-associated-label.md
        "jsx-a11y/control-has-associated-label": [
            "error",
            {
                "labelAttributes": [
                    "label"
                ],
                "controlComponents": [],
                "ignoreElements": [
                    "audio",
                    "canvas",
                    "embed",
                    "input",
                    "textarea",
                    "tr",
                    "video"
                ],
                "ignoreRoles": [
                    "grid",
                    "listbox",
                    "menu",
                    "menubar",
                    "radiogroup",
                    "row",
                    "tablist",
                    "toolbar",
                    "tree",
                    "treegrid"
                ],
                "depth": 5
            }
        ],
        // ensure <hX> tags have content and are not aria-hidden
        // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/heading-has-content.md
        "jsx-a11y/heading-has-content": [
            "error",
            {
                "components": [
                    ""
                ]
            }
        ],
        // require HTML elements to have a "lang" prop
        // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/html-has-lang.md
        "jsx-a11y/html-has-lang": "error",
        // ensure iframe elements have a unique title
        // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/iframe-has-title.md
        "jsx-a11y/iframe-has-title": "error",
        // Prevent img alt text from containing redundant words like "image", "picture", or "photo"
        // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/img-redundant-alt.md
        "jsx-a11y/img-redundant-alt": "error",
        // Elements with an interactive role and interaction handlers must be focusable
        // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/interactive-supports-focus.md
        "jsx-a11y/interactive-supports-focus": "error",
        // Enforce that a label tag has a text label and an associated control.
        // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/label-has-associated-control.md
        "jsx-a11y/label-has-associated-control": [
            "error",
            {
                "labelComponents": [],
                "labelAttributes": [],
                "controlComponents": [],
                "assert": "both",
                "depth": 25
            }
        ],
        // require HTML element's lang prop to be valid
        // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/lang.md
        "jsx-a11y/lang": "error",
        // media elements must have captions
        // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/media-has-caption.md
        "jsx-a11y/media-has-caption": [
            "error",
            {
                "audio": [],
                "video": [],
                "track": []
            }
        ],
        // require that mouseover/out, come with focus/blur, for keyboard-only users
        // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/mouse-events-have-key-events.md
        "jsx-a11y/mouse-events-have-key-events": "error",
        // Prevent use of `accessKey`
        // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/no-access-key.md
        "jsx-a11y/no-access-key": "error",
        // prohibit autoFocus prop
        // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/no-autofocus.md
        "jsx-a11y/no-autofocus": [
            "error",
            {
                "ignoreNonDOM": true
            }
        ],
        // prevent distracting elements, like <marquee> and <blink>
        // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/no-distracting-elements.md
        "jsx-a11y/no-distracting-elements": [
            "error",
            {
                "elements": [
                    "marquee",
                    "blink"
                ]
            }
        ],
        // WAI-ARIA roles should not be used to convert an interactive element to non-interactive
        // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/no-interactive-element-to-noninteractive-role.md
        "jsx-a11y/no-interactive-element-to-noninteractive-role": [
            "error",
            {
                "tr": [
                    "none",
                    "presentation"
                ]
            }
        ],
        // A non-interactive element does not support event handlers (mouse and key handlers)
        // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/no-noninteractive-element-interactions.md
        "jsx-a11y/no-noninteractive-element-interactions": [
            "error",
            {
                "handlers": [
                    "onClick",
                    "onMouseDown",
                    "onMouseUp",
                    "onKeyPress",
                    "onKeyDown",
                    "onKeyUp"
                ]
            }
        ],
        // WAI-ARIA roles should not be used to convert a non-interactive element to interactive
        // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/no-noninteractive-element-to-interactive-role.md
        "jsx-a11y/no-noninteractive-element-to-interactive-role": [
            "error",
            {
                "ul": [
                    "listbox",
                    "menu",
                    "menubar",
                    "radiogroup",
                    "tablist",
                    "tree",
                    "treegrid"
                ],
                "ol": [
                    "listbox",
                    "menu",
                    "menubar",
                    "radiogroup",
                    "tablist",
                    "tree",
                    "treegrid"
                ],
                "li": [
                    "menuitem",
                    "option",
                    "row",
                    "tab",
                    "treeitem"
                ],
                "table": [
                    "grid"
                ],
                "td": [
                    "gridcell"
                ]
            }
        ],
        // Tab key navigation should be limited to elements on the page that can be interacted with.
        // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/no-noninteractive-tabindex.md
        "jsx-a11y/no-noninteractive-tabindex": [
            "error",
            {
                "tags": [],
                "roles": [
                    "tabpanel"
                ]
            }
        ],
        // require onBlur instead of onChange
        // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/no-onchange.md
        "jsx-a11y/no-onchange": "off",
        // ensure HTML elements do not specify redundant ARIA roles
        // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/no-redundant-roles.md
        "jsx-a11y/no-redundant-roles": "error",
        // Enforce that DOM elements without semantic behavior not have interaction handlers
        // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/no-static-element-interactions.md
        "jsx-a11y/no-static-element-interactions": [
            "error",
            {
                "handlers": [
                    "onClick",
                    "onMouseDown",
                    "onMouseUp",
                    "onKeyPress",
                    "onKeyDown",
                    "onKeyUp"
                ]
            }
        ],
        // Enforce that elements with ARIA roles must have all required attributes
        // for that role.
        // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/role-has-required-aria-props.md
        "jsx-a11y/role-has-required-aria-props": "error",
        // Enforce that elements with explicit or implicit roles defined contain
        // only aria-* properties supported by that role.
        // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/role-supports-aria-props.md
        "jsx-a11y/role-supports-aria-props": "error",
        // only allow <th> to have the "scope" attr
        // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/scope.md
        "jsx-a11y/scope": "error",
        // Enforce tabIndex value is not greater than zero.
        // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/tabindex-no-positive.md
        "jsx-a11y/tabindex-no-positive": "error",
        // ----------------------------------------------------
        // Rules that no longer exist in eslint-plugin-jsx-a11y
        // ----------------------------------------------------

        // require that JSX labels use "htmlFor"
        // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/label-has-for.md
        // deprecated: replaced by `label-has-associated-control` rule
        "jsx-a11y/label-has-for": [
            "off",
            {
                "components": [],
                "required": {
                    "every": [
                        "nesting",
                        "id"
                    ]
                },
                "allowChildren": false
            }
        ],
        // Specify whether double or single quotes should be used in JSX attributes
        // https://eslint.org/docs/rules/jsx-quotes
        // managed by prettier
        "jsx-quotes": ["off", "prefer-single"],

        "class-methods-use-this": [
            "error",
            {
                "exceptMethods": [
                    "render",
                    "getInitialState",
                    "getDefaultProps",
                    "getChildContext",
                    "componentWillMount",
                    "UNSAFE_componentWillMount",
                    "componentDidMount",
                    "componentWillReceiveProps",
                    "UNSAFE_componentWillReceiveProps",
                    "shouldComponentUpdate",
                    "componentWillUpdate",
                    "UNSAFE_componentWillUpdate",
                    "componentDidUpdate",
                    "componentWillUnmount",
                    "componentDidCatch",
                    "getSnapshotBeforeUpdate"
                ]
            }
        ],
        // Prevent missing displayName in a React component definition
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/display-name.md
        "react/display-name": [
            "off",
            {
                "ignoreTranspilerName": false
            }
        ],
        // Forbid certain propTypes (any, array, object)
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-prop-types.md
        "react/forbid-prop-types": [
            "off",
            {
                "checkContextTypes": true,
                "checkChildContextTypes": true
            }
        ],

        // Forbid certain props on DOM Nodes
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-dom-props.md
        "react/forbid-dom-props": [
            "off",
            {
                "forbid": []
            }
        ],
        // Enforce boolean attributes notation in JSX
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-boolean-value.md
        "react/jsx-boolean-value": [
            "error",
            "never",
            {
                "always": []
            }
        ],
        // Validate closing bracket location in JSX
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-closing-bracket-location.md
        "react/jsx-closing-bracket-location": [
            "error",
            "line-aligned"
        ],
        // Validate closing tag location in JSX
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-closing-tag-location.md
        "react/jsx-closing-tag-location": "error",
        // Enforce or disallow spaces inside curly braces in JSX attributes
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-curly-spacing.md
        "react/jsx-curly-spacing": [
            "error",
            "never",
            {
                "allowMultiline": true
            }
        ],
        // Enforce event handler naming conventions in JSX
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-handler-names.md
        "react/jsx-handler-names": [
            "off",
            {
                "eventHandlerPrefix": "handle",
                "eventHandlerPropPrefix": "on"
            }
        ],
        // Validate props indentation in JSX
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-indent-props.md
        // managed by prettier
        "react/jsx-indent-props": ["off"],

        // Validate JSX has key prop when in array or iterator
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-key.md
        // Turned off because it has too many false positives
        "react/jsx-key": "off",
        // Limit maximum of props on a single line in JSX
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-max-props-per-line.md
        "react/jsx-max-props-per-line": [
            "error",
            {
                "maximum": 1,
                "when": "multiline"
            }
        ],
        // Prevent usage of .bind() in JSX props
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-bind.md
        "react/jsx-no-bind": [
            "error",
            {
                "ignoreRefs": true,
                "allowArrowFunctions": true,
                "allowFunctions": false,
                "allowBind": false,
                "ignoreDOMComponents": true
            }
        ],
        // Prevent duplicate props in JSX
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-duplicate-props.md
        "react/jsx-no-duplicate-props": [
            "error",
            {
                "ignoreCase": true
            }
        ],
        // Prevent usage of unwrapped JSX strings
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-literals.md
        "react/jsx-no-literals": [
            "off",
            {
                "noStrings": true
            }
        ],
        // Disallow undeclared variables in JSX
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-undef.md
        "react/jsx-no-undef": "error",
        // Enforce PascalCase for user-defined JSX components
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-pascal-case.md
        "react/jsx-pascal-case": [
            "error",
            {
                "allowAllCaps": true,
                "ignore": []
            }
        ],
        // Enforce propTypes declarations alphabetical sorting
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/sort-prop-types.md
        "react/sort-prop-types": [
            "off",
            {
                "ignoreCase": true,
                "callbacksLast": false,
                "requiredFirst": false,
                "sortShapeProp": true
            }
        ],
        // Deprecated in favor of react/jsx-sort-props
        "react/jsx-sort-prop-types": "off",
        // Enforce props alphabetical sorting
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-sort-props.md
        "react/jsx-sort-props": [
            "off",
            {
                "ignoreCase": true,
                "callbacksLast": false,
                "shorthandFirst": false,
                "shorthandLast": false,
                "noSortAlphabetically": false,
                "reservedFirst": true
            }
        ],
        // Enforce defaultProps declarations alphabetical sorting
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-sort-default-props.md
        "react/jsx-sort-default-props": [
            "off",
            {
                "ignoreCase": true
            }
        ],

        // Prevent variables used in JSX to be incorrectly marked as unused
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-uses-vars.md
        "react/jsx-uses-vars": "error",
        // Prevent usage of dangerous JSX properties
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-danger.md
        "react/no-danger": "warn",
        // Prevent usage of deprecated methods
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-deprecated.md
        "react/no-deprecated": [
            "error"
        ],
        // Prevent usage of setState in componentDidMount
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-did-mount-set-state.md
        // this is necessary for server-rendering
        "react/no-did-mount-set-state": "off",
        // Prevent usage of setState in componentDidUpdate
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-did-update-set-state.md
        "react/no-did-update-set-state": "error",
        // Prevent usage of setState in componentWillUpdate
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-will-update-set-state.md
        "react/no-will-update-set-state": "error",
        // Prevent direct mutation of this.state
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-direct-mutation-state.md
        "react/no-direct-mutation-state": "off",
        // Prevent usage of isMounted
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-is-mounted.md
        "react/no-is-mounted": "error",
        // Prevent multiple component definition per file
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-multi-comp.md
        "react/no-multi-comp": "off",
        // Prevent usage of setState
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-set-state.md
        "react/no-set-state": "off",
        // Prevent using string references
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-string-refs.md
        "react/no-string-refs": "error",
        // Prevent usage of unknown DOM property
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unknown-property.md
        "react/no-unknown-property": "error",
        // Require ES6 class declarations over React.createClass
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-es6-class.md
        "react/prefer-es6-class": [
            "error",
            "always"
        ],
        // Require stateless functions when not using lifecycle methods, setState or ref
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-stateless-function.md
        "react/prefer-stateless-function": [
            "error",
            {
                "ignorePureComponents": true
            }
        ],
        // Prevent missing props validation in a React component definition
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prop-types.md
        "react/prop-types": [
            "error",
            {
                "ignore": [],
                "customValidators": [],
                "skipUndeclared": false
            }
        ],
        // Prevent missing "React" when using JSX
        // If you're using React v17, you can safely disable the rule
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/react-in-jsx-scope.md
        "react/react-in-jsx-scope": "off",

        // Prevent React to be incorrectly marked as unused
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-uses-react.md
        "react/jsx-uses-react": "off",

        // Require render() methods to return something
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/require-render-return.md
        "react/require-render-return": "error",

        // Prevent extra closing tags for components without children
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/self-closing-comp.md
        "react/self-closing-comp": "error",

        // Enforce component methods order
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/sort-comp.md
        "react/sort-comp": [
            "error",
            {
                "order": [
                    "static-variables",
                    "static-methods",
                    "instance-variables",
                    "lifecycle",
                    "/^handle.+$/",
                    "/^on.+$/",
                    "getters",
                    "setters",
                    "/^(get|set)(?!(InitialState$|DefaultProps$|ChildContext$)).+$/",
                    "instance-methods",
                    "everything-else",
                    "rendering"
                ],
                "groups": {
                    "lifecycle": [
                        "displayName",
                        "propTypes",
                        "contextTypes",
                        "childContextTypes",
                        "mixins",
                        "statics",
                        "defaultProps",
                        "constructor",
                        "getDefaultProps",
                        "getInitialState",
                        "state",
                        "getChildContext",
                        "getDerivedStateFromProps",
                        "componentWillMount",
                        "UNSAFE_componentWillMount",
                        "componentDidMount",
                        "componentWillReceiveProps",
                        "UNSAFE_componentWillReceiveProps",
                        "shouldComponentUpdate",
                        "componentWillUpdate",
                        "UNSAFE_componentWillUpdate",
                        "getSnapshotBeforeUpdate",
                        "componentDidUpdate",
                        "componentDidCatch",
                        "componentWillUnmount"
                    ],
                    "rendering": [
                        "/^render.+$/",
                        "render"
                    ]
                }
            }
        ],

        // Prevent missing parentheses around multilines JSX
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-wrap-multilines.md
        "react/jsx-wrap-multilines": [
            "error",
            {
                "declaration": "parens-new-line",
                "assignment": "parens-new-line",
                "return": "parens-new-line",
                "arrow": "parens-new-line",
                "condition": "parens-new-line",
                "logical": "parens-new-line"
                //            "prop": "parens-new-line"
            }
        ],

        // Require that the first prop in a JSX element be on a new line when the element is multiline
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-first-prop-new-line.md
        "react/jsx-first-prop-new-line": [
            "error",
            "multiline-multiprop"
        ],

        // Enforce spacing around jsx equals signs
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-equals-spacing.md
        "react/jsx-equals-spacing": [
            "error",
            "never"
        ],

        // Enforce JSX indentation
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-indent.md
        // managed by prettier
        "react/jsx-indent": ["off"],

        // Disallow target="_blank" on links
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-target-blank.md
        "react/jsx-no-target-blank": [
            "error",
            {
                "enforceDynamicLinks": "always"
            }
        ],

        // only .jsx files may have JSX
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-filename-extension.md
        "react/jsx-filename-extension": [
            "error",
            {
                "extensions": [
                    ".jsx"
                ]
            }
        ],
        // prevent accidental JS comments from being injected into JSX as text
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-comment-textnodes.md
        "react/jsx-no-comment-textnodes": "error",

        // disallow using React.render/ReactDOM.render's return value
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-render-return-value.md
        "react/no-render-return-value": "error",

        // require a shouldComponentUpdate method, or PureRenderMixin
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/require-optimization.md
        "react/require-optimization": [
            "off",
            {
                "allowDecorators": []
            }
        ],

        // warn against using findDOMNode()
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-find-dom-node.md
        "react/no-find-dom-node": "error",

        // Forbid certain props on Components
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-component-props.md
        "react/forbid-component-props": [
            "off",
            {
                "forbid": []
            }
        ],

        // Forbid certain elements
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-elements.md
        "react/forbid-elements": [
            "off",
            {
                "forbid": []
            }
        ],

        // Prevent problem with children and props.dangerouslySetInnerHTML
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-danger-with-children.md
        "react/no-danger-with-children": "error",
        // Prevent unused propType definitions
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unused-prop-types.md
        "react/no-unused-prop-types": [
            "error",
            {
                "customValidators": [
                ],
                "skipShapeProps": true
            }
        ],

        // Require style prop value be an object or var
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/style-prop-object.md
        "react/style-prop-object": "error",

        // Prevent invalid characters from appearing in markup
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unescaped-entities.md
        "react/no-unescaped-entities": "error",

        // Prevent passing of children as props
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-children-prop.md
        "react/no-children-prop": "error",

        // Validate whitespace in and around the JSX opening and closing brackets
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-tag-spacing.md
        "react/jsx-tag-spacing": [
            "error",
            {
                "closingSlash": "never",
                "beforeSelfClosing": "always",
                "afterOpening": "never",
                "beforeClosing": "never"
            }
        ],

        // Enforce spaces before the closing bracket of self-closing JSX elements
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-space-before-closing.md
        // Deprecated in favor of jsx-tag-spacing
        "react/jsx-space-before-closing": [
            "off",
            "always"
        ],

        // Prevent usage of Array index in keys
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-array-index-key.md
        "react/no-array-index-key": "error",

        // Enforce a defaultProps definition for every prop that is not a required prop
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/require-default-props.md
        "react/require-default-props": [
            "off",
            {
                "forbidDefaultForRequired": true,
                "functions": "defaultArguments"
            }
        ],

        // Forbids using non-exported propTypes
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-foreign-prop-types.md
        // this is intentionally set to "warn". it would be "error",
        // but it's only critical if you're stripping propTypes in production.
        "react/forbid-foreign-prop-types": [
            "warn",
            {
                "allowInPropTypes": true
            }
        ],

        // Prevent void DOM elements from receiving children
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/void-dom-elements-no-children.md
        "react/void-dom-elements-no-children": "error",
        // Enforce all defaultProps have a corresponding non-required PropType
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/default-props-match-prop-types.md
        "react/default-props-match-prop-types": [
            "error",
            {
                "allowRequiredDefaults": false
            }
        ],

        // Prevent usage of shouldComponentUpdate when extending React.PureComponent
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-redundant-should-component-update.md
        "react/no-redundant-should-component-update": "error",

        // Prevent unused state values
        // https://github.com/yannickcr/eslint-plugin-react/pull/1103/
        "react/no-unused-state": "error",

        // Enforces consistent naming for boolean props
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/boolean-prop-naming.md
        "react/boolean-prop-naming": [
            "off",
            {
                "propTypeNames": [
                    "bool",
                    "mutuallyExclusiveTrueProps"
                ],
                "rule": "^(is|has)[A-Z]([A-Za-z0-9]?)+",
                "message": ""
            }
        ],
        // Prevents common casing typos
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-typos.md
        "react/no-typos": "error",

        // Enforce curly braces or disallow unnecessary curly braces in JSX props and/or children
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-curly-brace-presence.md
        "react/jsx-curly-brace-presence": [
            "error",
            {
                "props": "never",
                "children": "never"
            }
        ],

        // One JSX Element Per Line
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-one-expression-per-line.md
        // managed by prettier
        "react/jsx-one-expression-per-line": ["off", { "allow": "single-child" }],

        // Enforce consistent usage of destructuring assignment of props, state, and context
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/destructuring-assignment.md
        "react/destructuring-assignment": [
            "error",
            "always"
        ],

        // Prevent using this.state within a this.setState
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-access-state-in-setstate.md
        "react/no-access-state-in-setstate": "error",

        // Prevent usage of button elements without an explicit type attribute
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/button-has-type.md
        "react/button-has-type": [
            "error",
            {
                "button": true,
                "submit": true,
                "reset": false
            }
        ],

        // Ensures inline tags are not rendered without spaces between them
        "react/jsx-child-element-spacing": "off",

        // Prevent this from being used in stateless functional components
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-this-in-sfc.md
        "react/no-this-in-sfc": "error",

        // Validate JSX maximum depth
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-max-depth.md
        "react/jsx-max-depth": "off",

        // Disallow multiple spaces between inline JSX props
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-props-no-multi-spaces.md
        "react/jsx-props-no-multi-spaces": "error",

        // Prevent usage of UNSAFE_ methods
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unsafe.md
        "react/no-unsafe": "off",

        // Enforce shorthand or standard form for React fragments
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-fragments.md
        "react/jsx-fragments": [
            "error",
            "syntax"
        ],

        // Enforce linebreaks in curly braces in JSX attributes and expressions.
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-curly-newline.md
        // managed by prettier
        "react/jsx-curly-newline": ["off", {
            "multiline": "consistent",
            "singleline": "consistent"
        }],

        // Enforce state initialization style
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/state-in-constructor.md
        // TOUDOU: set to "never" once babel-preset-airbnb supports public class fields
        "react/state-in-constructor": [
            "error",
            "always"
        ],

        // Enforces where React component static properties should be positioned
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/static-property-placement.md
        // TOUDOU: set to "static public field" once babel-preset-airbnb supports public class fields
        "react/static-property-placement": [
            "error",
            "property assignment"
        ],

        // Disallow JSX props spreading
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-props-no-spreading.md
        "react/jsx-props-no-spreading": ["off", {
            "html": "enforce",
            "custom": "enforce",
            "explicitSpread": "ignore",
            "exceptions": []
        }],

        // Enforce that props are read-only
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-read-only-props.md
        "react/prefer-read-only-props": "off",

        // Prevent usage of `javascript:` URLs
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-script-url.md
        "react/jsx-no-script-url": [
            "error",
            [
                {
                    "name": "Link",
                    "props": [
                        "to"
                    ]
                }
            ]
        ],

        // Disallow unnecessary fragments
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-useless-fragment.md
        "react/jsx-no-useless-fragment": "error",

        // Prevent adjacent inline elements not separated by whitespace
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-adjacent-inline-elements.md
        "react/no-adjacent-inline-elements": "off",

        // Enforce a specific function type for function components
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/function-component-definition.md
        "react/function-component-definition": ["error", {
            "namedComponents": "arrow-function",
            "unnamedComponents": "arrow-function"
        }],

        // Enforce a new line after jsx elements and expressions
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-newline.md
        "react/jsx-newline": "off",
        // Prevent react contexts from taking non-stable values
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-constructed-context-values.md
        "react/jsx-no-constructed-context-values": "error",

        // Prevent creating unstable components inside components
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unstable-nested-components.md
        "react/no-unstable-nested-components": "error",

        // Enforce that namespaces are not used in React elements
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-namespace.md
        "react/no-namespace": "error",

        // Prefer exact proptype definitions
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-exact-props.md
        "react/prefer-exact-props": "error",

        // Lifecycle methods should be methods on the prototype, not class fields
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-arrow-function-lifecycle.md
        "react/no-arrow-function-lifecycle": "error",

        // Prevent usage of invalid attributes
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-invalid-html-attribute.md
        "react/no-invalid-html-attribute": "error",

        // Prevent declaring unused methods of component class
        // https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unused-class-component-methods.md
        "react/no-unused-class-component-methods": "error",

        // Enforce Rules of Hooks
        // https://github.com/facebook/react/tree/main/packages/eslint-plugin-react-hooks
        "react-hooks/rules-of-hooks": "error",

        // Verify the list of the dependencies for Hooks like useEffect and similar
        // https://github.com/facebook/react/tree/main/packages/eslint-plugin-react-hooks
        "react-hooks/exhaustive-deps": "error",

        // rules from outer space
        "max-len": [
            "warn",
            {
                "code": 120,
                "tabWidth": 2,
                "comments": 120,
                "ignoreComments": false,
                "ignoreTrailingComments": true,
                "ignoreUrls": true,
                "ignoreStrings": true,
                "ignoreTemplateLiterals": true,
                "ignoreRegExpLiterals": true
            }
        ],
        "no-unused-expressions": [
            "error",
            {
                "allowShortCircuit": true,
                "allowTernary": true
            }
        ],
        "no-plusplus": [
            "error",
            {
                "allowForLoopAfterthoughts": true
            }
        ],
        "no-param-reassign": [
            "warn"
        ]
        // end of rules from outer space
    },

    "overrides": [
        {
            "files": [
                "**/__tests__/**/*",
                "**/*.{spec,test}.*"
            ],
            "env": {
                "jest/globals": true
            },
            "rules": {
                // https://github.com/jest-community/eslint-plugin-jest/tree/main/docs/rules
                "jest/no-conditional-expect": "error",
                "jest/no-identical-title": "error",
                "jest/no-interpolation-in-snapshots": "error",
                "jest/no-jasmine-globals": "error",
                "jest/no-mocks-import": "error",
                "jest/valid-describe-callback": "error",
                "jest/valid-expect": "error",
                "jest/valid-expect-in-promise": "error",
                "jest/valid-title": "warn",

                // https://github.com/testing-library/eslint-plugin-testing-library
                "testing-library/await-async-queries": "error",
                "testing-library/await-async-utils": "error",
                "testing-library/no-await-sync-queries": "error",
                "testing-library/no-container": "error",
                "testing-library/no-debugging-utils": "error",
                "testing-library/no-dom-import": [
                    "error",
                    "react"
                ],
                "testing-library/no-node-access": "error",
                "testing-library/no-promise-in-fire-event": "error",
                "testing-library/no-render-in-lifecycle": "error",
                "testing-library/no-unnecessary-act": "error",
                "testing-library/no-wait-for-multiple-assertions": "error",
                "testing-library/no-wait-for-side-effects": "error",
                "testing-library/no-wait-for-snapshot": "error",
                "testing-library/prefer-find-by": "error",
                "testing-library/prefer-presence-queries": "error",
                "testing-library/prefer-query-by-disappearance": "error",
                "testing-library/prefer-screen-queries": "off",
                "testing-library/render-result-naming-convention": "error"
            }
        }
    ]
}
